import { Plugin, debounce } from 'obsidian';
import { MermaidViewEnhancerSettings, MermaidViewEnhancerSettingTab, DEFAULT_SETTINGS } from './settings';

// Âõ≥Ë°®„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„ÅÆÂûãÂÆöÁæ©
interface DiagramState {
	zoom: number;
	panX: number;
	panY: number;
	isDragging: boolean;
	dragStartX: number;
	dragStartY: number;
	lastTouchDistance: number;
}

export default class MermaidViewEnhancer extends Plugin {
	settings: MermaidViewEnhancerSettings;

	// DOMÂ§âÊõ¥„ÅÆÁõ£Ë¶ñ
	private observer: MutationObserver | null = null;
	private debouncedScan: () => void;

	async onload() {
		console.log('üéØ Mermaid View Enhancer „Éó„É©„Ç∞„Ç§„É≥ÈñãÂßã');

		// Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø
		await this.loadSettings();

		// Ë®≠ÂÆö„Çø„Éñ„ÇíËøΩÂä†
		this.addSettingTab(new MermaidViewEnhancerSettingTab(this.app, this));

		// Ê©üËÉΩÈñãÂßã
		this.startEnhancement();
	}

	onunload() {
		console.log('üîÑ Mermaid View Enhancer „Éó„É©„Ç∞„Ç§„É≥ÁµÇ‰∫Ü');
		this.stopEnhancement();
	}

	/**
	 * Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø
	 */
	async loadSettings() {
		const savedData = await this.loadData();
		let loadedSettings = Object.assign({}, DEFAULT_SETTINGS, savedData);
		
		// Âè§„ÅÑÂΩ¢Âºè„ÅÆwheelSensitivityÂÄ§„ÇíÊñ∞ÂΩ¢Âºè„Å´Â§âÊèõÔºà0.002 -> 100Ôºâ
		if (loadedSettings.wheelSensitivity < 1) {
			loadedSettings.wheelSensitivity = loadedSettings.wheelSensitivity * 50000; // 0.002 * 50000 = 100
		}
		
		// ÁèæÂú®„ÅÆË®≠ÂÆöÂûã„Å´ÈÅ©Âêà„Åô„Çã„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆ„Åø„ÇíÊäΩÂá∫ÔºàÂûãÂÆâÂÖ®Ôºâ
		this.settings = {
			maxZoom: loadedSettings.maxZoom,
			zoomStep: loadedSettings.zoomStep,
			wheelSensitivity: loadedSettings.wheelSensitivity,
			animationDuration: loadedSettings.animationDuration,
			containerWidthMode: loadedSettings.containerWidthMode,
			customWidth: loadedSettings.customWidth,
		};
	}

	/**
	 * Ë®≠ÂÆö„Çí‰øùÂ≠ò
	 */
	async saveSettings() {
		await this.saveData(this.settings);
	}

	/**
	 * Ê©üËÉΩ„ÇíÈñãÂßã
	 */
	startEnhancement() {
		// Âõ≥Ë°®„Çπ„Ç≠„É£„É≥„ÅÆ„Éá„Éê„Ç¶„É≥„ÇπÂá¶ÁêÜ
		this.debouncedScan = debounce(this.scanAndEnhanceDiagrams.bind(this), 500, true);

		// ÂàùÂõû„Çπ„Ç≠„É£„É≥
		this.scanAndEnhanceDiagrams();

		// DOMÂ§âÊõ¥„ÅÆÁõ£Ë¶ñÈñãÂßã
		this.startObservingDOM();

		// „Éì„É•„ÉºÂàá„ÇäÊõø„ÅàÊôÇ„ÅÆÂá¶ÁêÜ
		this.registerEvent(
			this.app.workspace.on('layout-change', () => {
				this.debouncedScan();
			})
		);

		// „Éï„Ç°„Ç§„É´Âàá„ÇäÊõø„ÅàÊôÇ„ÅÆÂá¶ÁêÜ
		this.registerEvent(
			this.app.workspace.on('active-leaf-change', () => {
				setTimeout(() => this.debouncedScan(), 100);
			})
		);

		console.log('‚úÖ Mermaid View Enhancer Ê©üËÉΩÈñãÂßã');
	}

	/**
	 * Ê©üËÉΩ„ÇíÂÅúÊ≠¢
	 */
	stopEnhancement() {
		// DOMÁõ£Ë¶ñ„ÇíÂÅúÊ≠¢
		if (this.observer) {
			this.observer.disconnect();
			this.observer = null;
		}

		// ÂÖ®„Å¶„ÅÆÂº∑Âåñ„Åï„Çå„ÅüÂõ≥Ë°®„Çí„É™„Çª„ÉÉ„Éà
		this.resetAllDiagrams();

		console.log('‚èπÔ∏è Mermaid View Enhancer Ê©üËÉΩÂÅúÊ≠¢');
	}

	/**
	 * DOMÂ§âÊõ¥„ÅÆÁõ£Ë¶ñ„ÇíÈñãÂßã
	 */
	private startObservingDOM() {
		this.observer = new MutationObserver((mutations) => {
			let shouldScan = false;
			
			mutations.forEach((mutation) => {
				if (mutation.type === 'childList') {
					mutation.addedNodes.forEach((node) => {
						if (node.nodeType === Node.ELEMENT_NODE) {
							const element = node as HTMLElement;
							// MermaidÂõ≥Ë°®„ÅÆËøΩÂä†„ÇíÊ§úÂá∫
							if (element.classList.contains('mermaid') || 
								element.querySelector('.mermaid')) {
								shouldScan = true;
							}
						}
					});
				}
			});

			if (shouldScan) {
				this.debouncedScan();
			}
		});

		// „Éó„É¨„Éì„É•„Éº„Ç®„É™„Ç¢„ÇíÁõ£Ë¶ñ
		this.observer.observe(document.body, {
			childList: true,
			subtree: true
		});
	}

	/**
	 * Âõ≥Ë°®„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶Ê©üËÉΩ„ÇíÈÅ©Áî®
	 */
	private scanAndEnhanceDiagrams() {
		// Ë°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãmermaidÂõ≥Ë°®„ÅÆ„Åø„ÇíÈÅ∏ÊäûÔºàÁ∑®ÈõÜ„Éì„É•„Éº„Å®„É™„Éº„Éá„Ç£„É≥„Ç∞„Éì„É•„Éº‰∏°ÂØæÂøúÔºâ
		const visibleMermaids = Array.from(document.querySelectorAll('.mermaid')).filter(el => {
			const element = el as HTMLElement;
			
			// Âü∫Êú¨ÁöÑ„Å™Ë°®Á§∫„ÉÅ„Çß„ÉÉ„ÇØ
			if (element.offsetParent === null || element.hasAttribute('data-zoom-enhanced')) {
				return false;
			}
			
			// SVG„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„ÇãMermaidÂõ≥Ë°®„ÅÆ„Åø„ÇíÂØæË±°„Å®„Åô„Çã
			// Ôºà„É¨„É≥„ÉÄ„É™„É≥„Ç∞Ê∏à„Åø„ÅÆÂõ≥Ë°®„ÇíÁ¢∫ÂÆü„Å´Ê§úÂá∫Ôºâ
			const hasSvg = element.querySelector('svg') !== null;
			if (!hasSvg) {
				return false;
			}
			
			// Ë¶™Ë¶ÅÁ¥†„ÅÆÂ≠òÂú®Á¢∫Ë™ç
			if (!element.parentElement) {
				return false;
			}
			
			// ÁâπÂÆö„ÅÆ„ÇØ„É©„ÇπÂêç„Å´‰æùÂ≠ò„Åõ„Åö„ÄÅË°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãMermaidÂõ≥Ë°®„ÇíÂπÖÂ∫É„ÅèÊ§úÂá∫
			return true;
		}) as HTMLElement[];

		if (visibleMermaids.length === 0) return;

		visibleMermaids.forEach((diagram, index) => {
			this.enhanceDiagram(diagram, index);
		});
	}

	/**
	 * ÂÄãÂà•„ÅÆÂõ≥Ë°®„Å´Ê©üËÉΩ„ÇíÈÅ©Áî®
	 */
	private enhanceDiagram(diagram: HTMLElement, index: number) {
		// Êó¢„Å´Âá¶ÁêÜÊ∏à„Åø„Å™„Çâ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
		if (diagram.hasAttribute('data-zoom-enhanced')) {
			return;
		}

		// „É™„Éº„Éá„Ç£„É≥„Ç∞„Éì„É•„ÉºÁî®„ÅÆwrapper‰ΩúÊàê
		this.createWrapperIfNeeded(diagram);

		// Ë°®Á§∫Êû†„ÅÆÂπÖ„ÇíË™øÊï¥
		this.adjustContainerWidth(diagram);

		// Áä∂ÊÖãÁÆ°ÁêÜ
		const state: DiagramState = {
			zoom: 1.0, // ÂàùÊúü„Ç∫„Éº„É†„ÅØ100%Âõ∫ÂÆö
			panX: 0,
			panY: 0,
			isDragging: false,
			dragStartX: 0,
			dragStartY: 0,
			lastTouchDistance: 0
		};

		// Âü∫Êú¨„Çπ„Çø„Ç§„É´Ë®≠ÂÆöÔºàÈùôÁöÑ„Çπ„Çø„Ç§„É´„ÅØCSS„ÅßÁÆ°ÁêÜÔºâ
		// ÂãïÁöÑ„Çπ„Çø„Ç§„É´ÔºàË®≠ÂÆö‰æùÂ≠òÔºâ„ÅÆ„Åø„ÇíJavaScript„ÅßË®≠ÂÆö
		diagram.style.transition = `transform ${this.settings.animationDuration}s ease-out`;
		
		// Âá¶ÁêÜÊ∏à„Åø„Éû„Éº„ÇØ„ÇíËøΩÂä†ÔºàCSS„Çª„É¨„ÇØ„Çø„Éº„Åß‰ΩøÁî®Ôºâ
		diagram.setAttribute('data-zoom-enhanced', 'true');

		// „Éà„É©„É≥„Çπ„Éï„Ç©„Éº„É†ÈÅ©Áî®Èñ¢Êï∞
		const applyTransform = () => {
			const transform = `translate(${state.panX}px, ${state.panY}px) scale(${state.zoom})`;
			diagram.style.transform = transform;

			// cursorÁä∂ÊÖã„ÇíCSS„ÇØ„É©„Çπ„ÅßÁÆ°ÁêÜ
			if (state.isDragging) {
				diagram.classList.add('is-dragging');
			} else {
				diagram.classList.remove('is-dragging');
			}
		};

		// „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÔºö„É™„Çª„ÉÉ„Éà
		const handleDoubleClick = (e: MouseEvent) => {
			e.preventDefault();
			state.zoom = 1.0; // 100%Âõ∫ÂÆö
			state.panX = 0;
			state.panY = 0;
			applyTransform();
		};

		// „Éû„Ç¶„Çπ„Éõ„Ç§„Éº„É´ÔºöÊ≠£Á¢∫„Å™„Éû„Ç¶„Çπ‰ΩçÁΩÆ‰∏≠ÂøÉ„Ç∫„Éº„É†
		const handleWheel = (e: WheelEvent) => {
			e.preventDefault();

			const rect = diagram.getBoundingClientRect();
			const mouseX = e.clientX - rect.left;
			const mouseY = e.clientY - rect.top;

			// ÁèæÂú®„ÅÆ„Éû„Ç¶„Çπ‰ΩçÁΩÆ„Åß„ÅÆÂõ≥Ë°®‰∏ä„ÅÆÂÆüÂ∫ßÊ®ô„ÇíË®àÁÆó
			const currentPointX = (mouseX - state.panX) / state.zoom;
			const currentPointY = (mouseY - state.panY) / state.zoom;

			// „Ç∫„Éº„É†Ë®àÁÆóÔºà„Éë„Éº„Çª„É≥„ÉàÂÄ§„ÇíÂÜÖÈÉ®ÂÄ§„Å´Â§âÊèõÔºâ
			const wheelSensitivity = this.settings.wheelSensitivity * 0.00002; // 100% = 0.002
			const deltaZoom = -e.deltaY * wheelSensitivity;
			const oldZoom = state.zoom;
			state.zoom = Math.max(1.0, Math.min(this.settings.maxZoom, state.zoom + deltaZoom)); // ÊúÄÂ∞è„Ç∫„Éº„É†100%Âõ∫ÂÆö

			// „Ç∫„Éº„É†Âæå„ÇÇ„Éû„Ç¶„Çπ‰ΩçÁΩÆ„Å´Âêå„ÅòÂÆüÂ∫ßÊ®ô„ÅåÊù•„Çã„Çà„ÅÜ„Å´Ë™øÊï¥
			if (state.zoom !== oldZoom) {
				state.panX = mouseX - currentPointX * state.zoom;
				state.panY = mouseY - currentPointY * state.zoom;
				applyTransform();
			}
		};

		// „Éû„Ç¶„Çπ„Éâ„É©„ÉÉ„Ç∞Âá¶ÁêÜÔºàÂ∏∏„Å´ÊúâÂäπÔºâ
		const handleMouseDown = (e: MouseEvent) => {
			state.isDragging = true;
			state.dragStartX = e.clientX - state.panX;
			state.dragStartY = e.clientY - state.panY;
			applyTransform();
			e.preventDefault();

			// „Ç∞„É≠„Éº„Éê„É´„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†
			document.addEventListener('mousemove', handleMouseMove);
			document.addEventListener('mouseup', handleMouseUp);
		};

		const handleMouseMove = (e: MouseEvent) => {
			if (state.isDragging) {
				state.panX = e.clientX - state.dragStartX;
				state.panY = e.clientY - state.dragStartY;
				applyTransform();
			}
		};

		const handleMouseUp = () => {
			if (state.isDragging) {
				state.isDragging = false;
				applyTransform();
				// „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÂâäÈô§
				document.removeEventListener('mousemove', handleMouseMove);
				document.removeEventListener('mouseup', handleMouseUp);
			}
		};

		// „Çø„ÉÉ„ÉÅÊìç‰ΩúÂá¶ÁêÜ
		const handleTouchStart = (e: TouchEvent) => {
			if (e.touches.length === 2) {
				e.preventDefault();
				const touch1 = e.touches[0];
				const touch2 = e.touches[1];
				state.lastTouchDistance = Math.sqrt(
					Math.pow(touch2.clientX - touch1.clientX, 2) +
					Math.pow(touch2.clientY - touch1.clientY, 2)
				);
			} else if (e.touches.length === 1) {
				// Â∏∏„Å´„Éâ„É©„ÉÉ„Ç∞ÂèØËÉΩ
				state.isDragging = true;
				state.dragStartX = e.touches[0].clientX - state.panX;
				state.dragStartY = e.touches[0].clientY - state.panY;
				applyTransform();
			}
		};

		const handleTouchMove = (e: TouchEvent) => {
			if (e.touches.length === 2) {
				e.preventDefault();
				const touch1 = e.touches[0];
				const touch2 = e.touches[1];
				const currentDistance = Math.sqrt(
					Math.pow(touch2.clientX - touch1.clientX, 2) +
					Math.pow(touch2.clientY - touch1.clientY, 2)
				);

				if (state.lastTouchDistance > 0) {
					const scale = currentDistance / state.lastTouchDistance;
					const oldZoom = state.zoom;
					state.zoom = Math.max(1.0, Math.min(this.settings.maxZoom, state.zoom * scale)); // ÊúÄÂ∞è„Ç∫„Éº„É†100%Âõ∫ÂÆö

					const rect = diagram.getBoundingClientRect();
					const centerX = (touch1.clientX + touch2.clientX) / 2 - rect.left;
					const centerY = (touch1.clientY + touch2.clientY) / 2 - rect.top;

					if (state.zoom !== oldZoom) {
						const currentPointX = (centerX - state.panX) / oldZoom;
						const currentPointY = (centerY - state.panY) / oldZoom;
						state.panX = centerX - currentPointX * state.zoom;
						state.panY = centerY - currentPointY * state.zoom;
					}

					applyTransform();
				}

				state.lastTouchDistance = currentDistance;
			} else if (e.touches.length === 1 && state.isDragging) {
				// Â∏∏„Å´„Éâ„É©„ÉÉ„Ç∞ÂèØËÉΩ
				e.preventDefault();
				state.panX = e.touches[0].clientX - state.dragStartX;
				state.panY = e.touches[0].clientY - state.dragStartY;
				applyTransform();
			}
		};

		const handleTouchEnd = () => {
			state.isDragging = false;
			state.lastTouchDistance = 0;
			applyTransform();
		};

		// „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÁôªÈå≤
		diagram.addEventListener('dblclick', handleDoubleClick);
		diagram.addEventListener('wheel', handleWheel);
		diagram.addEventListener('mousedown', handleMouseDown);
		diagram.addEventListener('touchstart', handleTouchStart);
		diagram.addEventListener('touchmove', handleTouchMove);
		diagram.addEventListener('touchend', handleTouchEnd);
	}

	/**
	 * „É™„Éº„Éá„Ç£„É≥„Ç∞„Éì„É•„ÉºÁî®„ÅÆwrapperË¶ÅÁ¥†„Çí‰ΩúÊàê
	 */
	private createWrapperIfNeeded(diagram: HTMLElement) {
		const parent = diagram.parentElement;
		if (!parent) return;

		// Á∑®ÈõÜ„Éì„É•„Éº„ÅÆÂ†¥Âêà„ÅØwrapper„Çí‰ΩúÊàê„Åó„Å™„ÅÑ
		if (parent.className.includes('cm-preview-code-block')) {
			return;
		}

		// Êó¢„Å´wrapper„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
		if (parent.classList.contains('mermaid-wrapper')) {
			return;
		}

		// wrapperË¶ÅÁ¥†„Çí‰ΩúÊàêÔºà„Çπ„Çø„Ç§„É´„ÅØCSS„ÅßÁÆ°ÁêÜÔºâ
		const wrapper = document.createElement('div');
		wrapper.className = 'mermaid-wrapper';

		// Âõ≥Ë°®„Çíwrapper„ÅßÂåÖ„ÇÄ
		parent.insertBefore(wrapper, diagram);
		wrapper.appendChild(diagram);
	}

	/**
	 * Ë°®Á§∫Êû†„ÅÆÂπÖ„ÇíË™øÊï¥
	 */
	private adjustContainerWidth(diagram: HTMLElement) {
		const parent = diagram.parentElement;
		if (!parent) return;

		// Á∑®ÈõÜ„Éì„É•„Éº„ÅÆÂ†¥Âêà
		if (parent.className.includes('cm-preview-code-block')) {
			this.adjustEditingViewWidth(parent);
			return;
		}

		// „É™„Éº„Éá„Ç£„É≥„Ç∞„Éì„É•„Éº„ÅÆÂ†¥ÂêàÔºàwrapper‰ΩøÁî®Ôºâ
		if (parent.classList.contains('mermaid-wrapper')) {
			this.adjustReadingViewWidth(parent);
			return;
		}
	}

	/**
	 * Á∑®ÈõÜ„Éì„É•„Éº„ÅÆË°®Á§∫Êû†Ë™øÊï¥
	 */
	private adjustEditingViewWidth(container: HTMLElement) {
		// Êó¢Â≠ò„ÅÆ„ÇØ„É©„Çπ„ÇíÂâäÈô§
		container.classList.remove('mermaid-container-custom');
		container.classList.remove('mermaid-container-fullwidth');

		switch (this.settings.containerWidthMode) {
			case 'auto':
				container.style.width = '';
				container.style.maxWidth = '';
				container.style.overflow = '';
				break;
				
			case 'custom':
				container.classList.add('mermaid-container-custom');
				container.style.width = `${this.settings.customWidth}px`;
				container.style.maxWidth = `${this.settings.customWidth}px`;
				container.style.overflow = 'auto';
				break;
				
			case 'fullwidth':
				container.classList.add('mermaid-container-fullwidth');
				container.style.width = '100%';
				container.style.maxWidth = '100%';
				container.style.overflow = 'auto';
				break;
		}
	}

	/**
	 * „É™„Éº„Éá„Ç£„É≥„Ç∞„Éì„É•„Éº„ÅÆË°®Á§∫Êû†Ë™øÊï¥
	 */
	private adjustReadingViewWidth(wrapper: HTMLElement) {
		// Êó¢Â≠ò„ÅÆ„ÇØ„É©„Çπ„ÇíÂâäÈô§
		wrapper.classList.remove('mermaid-wrapper-custom');
		wrapper.classList.remove('mermaid-wrapper-fullwidth');

		switch (this.settings.containerWidthMode) {
			case 'auto':
				wrapper.style.width = '100%';
				wrapper.style.maxWidth = '';
				break;
				
			case 'custom':
				wrapper.classList.add('mermaid-wrapper-custom');
				wrapper.style.width = `${this.settings.customWidth}px`;
				wrapper.style.maxWidth = `${this.settings.customWidth}px`;
				break;
				
			case 'fullwidth':
				wrapper.classList.add('mermaid-wrapper-fullwidth');
				wrapper.style.width = '100%';
				wrapper.style.maxWidth = '100%';
				break;
		}
	}

	/**
	 * Êó¢Â≠ò„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„Çí„ÇØ„É™„Ç¢
	 */
	private clearExistingListeners(element: HTMLElement): HTMLElement {
		const newElement = element.cloneNode(true) as HTMLElement;
		element.parentNode?.replaceChild(newElement, element);
		return newElement;
	}

	/**
	 * ÂÖ®„Å¶„ÅÆÂõ≥Ë°®„Çí„É™„Çª„ÉÉ„Éà
	 */
	private resetAllDiagrams() {
		const diagrams = document.querySelectorAll('.mermaid[data-zoom-enhanced]');
		diagrams.forEach((diagram) => {
			const element = diagram as HTMLElement;
			
			// „Çπ„Çø„Ç§„É´„Çí„É™„Çª„ÉÉ„Éà
			element.style.transform = '';
			element.style.transition = '';
			
			// CSS„ÇØ„É©„Çπ„ÇíÂâäÈô§
			element.classList.remove('is-dragging');
			element.removeAttribute('data-zoom-enhanced');
			
			// Ë¶™Ë¶ÅÁ¥†„ÅÆÂá¶ÁêÜ
			const parent = element.parentElement;
			if (parent) {
				// Á∑®ÈõÜ„Éì„É•„Éº„ÅÆÂ†¥Âêà
				if (parent.className.includes('cm-preview-code-block')) {
					parent.style.width = '';
					parent.style.maxWidth = '';
					parent.style.overflow = '';
					parent.classList.remove('mermaid-container-custom');
					parent.classList.remove('mermaid-container-fullwidth');
				}
				// „É™„Éº„Éá„Ç£„É≥„Ç∞„Éì„É•„Éº„ÅÆwrapper „ÅÆÂ†¥Âêà
				else if (parent.classList.contains('mermaid-wrapper')) {
					const grandParent = parent.parentElement;
					if (grandParent) {
						// wrapper„ÇíÂâäÈô§„Åó„Å¶Âõ≥Ë°®„ÇíÂÖÉ„ÅÆ‰ΩçÁΩÆ„Å´Êàª„Åô
						grandParent.insertBefore(element, parent);
						grandParent.removeChild(parent);
					}
				}
			}
		});
	}
}